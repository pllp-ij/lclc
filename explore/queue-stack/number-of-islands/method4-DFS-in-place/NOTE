NOTE: 
    The same DFS logic matching relationship are,
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV1 -> method3-DFS-extra-2d-space/DFS-recursion-implementation/NumberOfIslandsV1
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV2 -> method3-DFS-extra-2d-space/DFS-recursion-implementation/NumberOfIslandsV2
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV3 -> method3-DFS-extra-2d-space/DFS-recursion-implementation/NumberOfIslandsV3
        
    The same logic between "process queue in BFS" and "process stack in DFS" are:
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV1 -> method1-BFS-extra-2d-space/NumberOfIslandsV1
            iterate each node in linked list without dummy head, from head to NULL
            
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV2 -> method1-BFS-extra-2d-space/NumberOfIslandsV2
            iterate each node in linked list without dummy head, from head to last non-NULL node
            
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV3 -> method1-BFS-extra-2d-space/NumberOfIslandsV3
            iterate each node in linked list without dummy head, from head to last non-NULL node, operation for next node is process in current node
            
        method3-DFS-extra-2d-space/DFS-stack-implementation/NumberOfIslandsV4 -> method1-BFS-extra-2d-space/NumberOfIslandsV4
            iterate each node in linked list with dummy head, from dummy head to last non-NULL node
            the reason why an extra operation was done before the while loop for stack is that the dummy head is actually 
            not pushed into stack, so it should be dealt with seperately, then the code within while loop when stack is 
            not empty is for all the nodes from head to last non-NULL node
            
                                                                      NOTHING -> method1-BFS-extra-2d-space/NumberOfIslandsV5
        method1-BFS-extra-2d-space/NumberOfIslandsV5 just as a raw implementation of BFS, and all code written within one function, just for reference and learning
    
    The reason why 
        the solutions number in method3-DFS-extra-2d-space/DFS-recursion-implementation is 3, and
        the solutions number in method3-DFS-extra-2d-space/DFS-stack-implementation is 4,
        is that the V4 in method3-DFS-extra-2d-space/DFS-stack-implementation is a solution based on dummy head, 
         but V1, V2, V3 in method3-DFS-extra-2d-space/DFS-recursion-implementation is not based on dummy head, because the position in parameters is (i, j), not the dummy head position
         so if redesign the parameters as the dummy head position, then there should be a V4 in method3-DFS-extra-2d-space/DFS-recursion-implementation
         
         